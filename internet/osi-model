# TCP IP MODEL

Divide network communication into logical steps (or abstractions steps).

Layers are ordered from layer which is most closest to user to layer most close to "wite"

### Aplication layer
The end user is interacting via that layer, e.g. browser communication via Hypertext Transfer Protocol protocol

HTTP
-> request/response protocol
-> based on TCP
-> client server communication model
-> connection established for each request/response pair
-> specific request structure (GET, POST, ....) + query params whatever

### Transport layer
TCP (windowing) / UDP
-> decides acknoledgment and windowing
-> not much configuration can be done here

## Network layer
Routing, IP addresses
-> a lot of configuration can be done here (from "network master" person perspective)
-> "ping"

## Link layer
Mac addresses + ARP and switches.

## Physical
Physical data transfer, cables.



# DNS RECORDS

## A record
Point domain to IP address. "jozko.com" => 145.34.53.54

## AAAA record
As A for IPv6.

## CNAME record
map subdomains to domain names
Point subdomain to another domain "ferko.jozko.com" -> "jozko.com"
"jozko.com" -> "google.com"

## MX (Mail exchange)
Identifies mail server IP for DNS name

And more ...


An HTTP session is a sequence of network request-response transactions. An HTTP client initiates a request by establishing a Transmission Control Protocol (TCP) connection to a particular port on a server (typically port 80, occasionally port 8080; see List of TCP and UDP port numbers). An HTTP server listening on that port waits for a client's request message. Upon receiving the request, the server sends back a status line, such as "HTTP/1.1 200 OK", and a message of its own.
The body of this message is typically the requested resource, although an error message or other information may also be returned

Concept of headers (also cookies are send as headers) and body (defines the "structure" of messages, thus protocol)

https://sookocheff.com/post/networking/how-do-websockets-work/



